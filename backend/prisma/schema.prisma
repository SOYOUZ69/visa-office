// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum ClientType {
  INDIVIDUAL
  FAMILY
  GROUP
  PHONE_CALL
}

enum ClientStatus {
  NEW
  IN_REVIEW
  PENDING_DOCS
  APPROVED
  REJECTED
}

enum AttachmentType {
  PASSPORT
  VISA
  PHOTO
  DOCUMENT
  OTHER
}

enum UserRole {
  ADMIN
  USER
}

enum ServiceType {
  TRANSLATION
  DOSSIER_TREATMENT
  ASSURANCE
  VISA_APPLICATION
  CONSULTATION
  OTHER
}

enum PaymentOption {
  BANK_TRANSFER
  CHEQUE
  POST
  CASH
}

enum PaymentModality {
  FULL_PAYMENT
  SIXTY_FORTY
  MILESTONE_PAYMENTS
}

enum InstallmentStatus {
  PENDING
  PAID
}
enum CaisseType {
  VIRTUAL
  CASH
  BANK_ACCOUNT
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum ExpenseCategory {
  OFFICE_RENT
  UTILITIES
  SALARIES
  OFFICE_SUPPLIES
  INSURANCE
  LEGAL_FEES
  MARKETING
  TRAVEL
  OTHER
}

enum SalaryType {
  MONTHLY
  CLIENTCOMMISSION
  PERIODCOMMISSION
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
}
// Models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Client {
  id                   String       @id @default(cuid())
  clientType           ClientType
  status               ClientStatus @default(NEW)
  fullName             String
  address              String
  jobTitle             String?
  passportNumber       String?
  email                String
  destination          String
  visaType             String
  notes                String?
  isMinor              Boolean      @default(false)
  guardianFullName     String?
  guardianCIN          String?
  guardianRelationship String?
  assignedEmployeeId   String?      // Employee assigned to this client
  assignedEmployee     Employee?    @relation(fields: [assignedEmployeeId], references: [id])
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  // Relations
  phoneNumbers  PhoneNumber[]
  employers     Employer[]
  attachments   Attachment[]
  familyMembers FamilyMember[]
  serviceItems  ServiceItem[]
  payments      Payment[]

  @@map("clients")
}

model PhoneNumber {
  id       String @id @default(cuid())
  number   String
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("phone_numbers")
}

model Employer {
  id       String @id @default(cuid())
  name     String
  position String?
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("employers")
}

model Attachment {
  id        String         @id @default(cuid())
  filename  String
  originalName String
  mimetype  String
  size      Int
  type      AttachmentType
  path      String
  clientId  String
  client    Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())

  @@map("attachments")
}

model FamilyMember {
  id             String   @id @default(cuid())
  fullName       String
  passportNumber String
  relationship   String?
  age            Int?
  clientId       String
  client         Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("family_members")
}

model ServiceItem {
  id          String      @id @default(cuid())
  clientId    String
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  serviceType ServiceType
  quantity    Int         @default(1)
  unitPrice   Decimal     @db.Decimal(10,2)
  isProcessed Boolean     @default(false) // Track if service has been processed in a payment
  paymentId   String?     // Reference to the payment that processed this service
  payment     Payment?    @relation(fields: [paymentId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("service_items")
}


model Payment {
  id              String          @id @default(cuid())
  clientId        String
  client          Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  totalAmount     Decimal         @db.Decimal(10,2)
  paymentOption   PaymentOption?
  paymentModality PaymentModality
  transferCode    String?
  caisseId        String?         // Which caisse received the payment
  caisse          Caisse?         @relation(fields: [caisseId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  installments PaymentInstallment[]
  transactions Transaction[]
  serviceItems  ServiceItem[]
  @@map("payments")
}

model PaymentInstallment {
  id            String            @id @default(cuid())
  paymentId     String
  payment       Payment           @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  description   String
  percentage    Decimal           @db.Decimal(5,2) // e.g., 60.00 for 60%
  amount        Decimal           @db.Decimal(10,2)
  dueDate       DateTime
  paymentOption PaymentOption?
  transferCode  String?
  status        InstallmentStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("payment_installments")
}
model Caisse {
  id          String     @id @default(cuid())
  name        String
  type        CaisseType
  balance     Decimal    @db.Decimal(12,2) @default(0)
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  transactions Transaction[]
  payments     Payment[]
  @@map("caisses")
}

model Transaction {
  id              String            @id @default(cuid())
  caisseId        String
  caisse          Caisse            @relation(fields: [caisseId], references: [id])
  type            TransactionType
  category        ExpenseCategory?
  amount          Decimal           @db.Decimal(12,2)
  description     String
  reference       String?           // Payment ID, client name, etc.
  status          TransactionStatus @default(PENDING)
  approvedBy      String?           // User ID who approved/rejected
  approvedAt      DateTime?         // When the transaction was approved/rejected
  rejectionReason String?           // Reason for rejection if applicable
  transactionDate DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  paymentId       String?
  payment         Payment?          @relation(fields: [paymentId], references: [id])

  @@map("transactions")
}

model FinancialReport {
  id                String   @id @default(cuid())
  reportDate        DateTime @default(now())
  periodStart       DateTime
  periodEnd         DateTime
  totalIncome       Decimal  @db.Decimal(12,2)
  totalExpenses     Decimal  @db.Decimal(12,2)
  totalTax          Decimal  @db.Decimal(12,2)
  netProfit         Decimal  @db.Decimal(12,2)
  caisseBalances    Json     // Store balances for each caisse
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("financial_reports")
}
model Employee {
  id                   String   @id @default(cuid())
  fullName             String
  salaryType           SalaryType
  salaryAmount         Decimal
  commissionPercentage String
  soldeCoungiee        Decimal
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  assignedClients Client[] // Clients assigned to this employee
  attendance      Attendance[]

  @@map("employees")
}

model Attendance {
  id          String           @id @default(cuid())
  employeeId  String
  employee    Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date        DateTime
  status      AttendanceStatus
  reason      String?          // Reason for absence if applicable
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([employeeId, date]) // One attendance record per employee per day
  @@map("attendance")
}